
Matrix Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002494  08002494  00012494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000088  08002594  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002594  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072e9  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a1  00000000  00000000  0002739a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00028840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00028ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e3e  00000000  00000000  000294b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fcb  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827a0  00000000  00000000  000482c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000caa61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d08  00000000  00000000  000caab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800247c 	.word	0x0800247c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800247c 	.word	0x0800247c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb15 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f877 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e5 	bl	8000328 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f8b9 	bl	80002d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000162:	4b34      	ldr	r3, [pc, #208]	; (8000234 <main+0xe8>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a33      	ldr	r2, [pc, #204]	; (8000234 <main+0xe8>)
 8000168:	f043 0304 	orr.w	r3, r3, #4
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b31      	ldr	r3, [pc, #196]	; (8000234 <main+0xe8>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0304 	and.w	r3, r3, #4
 8000176:	60bb      	str	r3, [r7, #8]
 8000178:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800017a:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <main+0xe8>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a2d      	ldr	r2, [pc, #180]	; (8000234 <main+0xe8>)
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b2b      	ldr	r3, [pc, #172]	; (8000234 <main+0xe8>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0308 	and.w	r3, r3, #8
 800018e:	607b      	str	r3, [r7, #4]
 8000190:	687b      	ldr	r3, [r7, #4]
	Keypad_Init(&kp);
 8000192:	4829      	ldr	r0, [pc, #164]	; (8000238 <main+0xec>)
 8000194:	f000 fa39 	bl	800060a <Keypad_Init>
	char str[32];

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <main+0xe8>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a25      	ldr	r2, [pc, #148]	; (8000234 <main+0xe8>)
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6193      	str	r3, [r2, #24]
 80001a4:	4b23      	ldr	r3, [pc, #140]	; (8000234 <main+0xe8>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	f003 0310 	and.w	r3, r3, #16
 80001ac:	603b      	str	r3, [r7, #0]
 80001ae:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef G = { .Pin = GPIO_PIN_13, .Mode = GPIO_MODE_OUTPUT_PP,
 80001b0:	f107 030c 	add.w	r3, r7, #12
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	2301      	movs	r3, #1
 80001c6:	613b      	str	r3, [r7, #16]
 80001c8:	2302      	movs	r3, #2
 80001ca:	61bb      	str	r3, [r7, #24]
			.Speed = GPIO_SPEED_FREQ_LOW, };
	HAL_GPIO_Init(GPIOC, &G);
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	4619      	mov	r1, r3
 80001d2:	481a      	ldr	r0, [pc, #104]	; (800023c <main+0xf0>)
 80001d4:	f000 fc3e 	bl	8000a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Keypad_Refresh(&kp);
 80001d8:	4817      	ldr	r0, [pc, #92]	; (8000238 <main+0xec>)
 80001da:	f000 fa82 	bl	80006e2 <Keypad_Refresh>

		if (Keypad_Get_Key(&kp, 15)) {
 80001de:	210f      	movs	r1, #15
 80001e0:	4815      	ldr	r0, [pc, #84]	; (8000238 <main+0xec>)
 80001e2:	f000 fab5 	bl	8000750 <Keypad_Get_Key>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d006      	beq.n	80001fa <main+0xae>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f2:	4812      	ldr	r0, [pc, #72]	; (800023c <main+0xf0>)
 80001f4:	f000 fdb2 	bl	8000d5c <HAL_GPIO_WritePin>
 80001f8:	e005      	b.n	8000206 <main+0xba>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	480e      	ldr	r0, [pc, #56]	; (800023c <main+0xf0>)
 8000202:	f000 fdab 	bl	8000d5c <HAL_GPIO_WritePin>
		}

		HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fb1b 	bl	8000844 <HAL_Delay>

		int len = sprintf(str, "Keystat:%08lx \n", kp.KeysStatus);
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0xec>)
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	490a      	ldr	r1, [pc, #40]	; (8000240 <main+0xf4>)
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fcb5 	bl	8001b88 <siprintf>
 800021e:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_UART_Transmit(&huart1, (const uint8_t*) str, len, 100);
 8000220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000222:	b29a      	uxth	r2, r3
 8000224:	f107 011c 	add.w	r1, r7, #28
 8000228:	2364      	movs	r3, #100	; 0x64
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <main+0xf8>)
 800022c:	f001 fa1c 	bl	8001668 <HAL_UART_Transmit>
	while (1) {
 8000230:	e7d2      	b.n	80001d8 <main+0x8c>
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	20000000 	.word	0x20000000
 800023c:	40011000 	.word	0x40011000
 8000240:	08002494 	.word	0x08002494
 8000244:	200000a4 	.word	0x200000a4

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fc8e 	bl	8001b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fd7b 	bl	8000d8c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800029c:	f000 f866 	bl	800036c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ffe8 	bl	8001290 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c6:	f000 f851 	bl	800036c <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_USART1_UART_Init+0x50>)
 80002dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 800030c:	f001 f94e 	bl	80015ac <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000316:	f000 f829 	bl	800036c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000a4 	.word	0x200000a4
 8000324:	40013800 	.word	0x40013800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <MX_GPIO_Init+0x40>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0320 	and.w	r3, r3, #32
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_GPIO_Init+0x40>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_MspInit+0x5c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x5c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_MspInit+0x60>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_MspInit+0x60>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <HAL_UART_MspInit+0x8c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d131      	bne.n	8000460 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <HAL_UART_MspInit+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <HAL_UART_MspInit+0x90>)
 8000402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <HAL_UART_MspInit+0x90>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_UART_MspInit+0x90>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a14      	ldr	r2, [pc, #80]	; (800046c <HAL_UART_MspInit+0x90>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_UART_MspInit+0x90>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800042c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000432:	2302      	movs	r3, #2
 8000434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000436:	2303      	movs	r3, #3
 8000438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	480b      	ldr	r0, [pc, #44]	; (8000470 <HAL_UART_MspInit+0x94>)
 8000442:	f000 fb07 	bl	8000a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <HAL_UART_MspInit+0x94>)
 800045c:	f000 fafa 	bl	8000a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40013800 	.word	0x40013800
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <NMI_Handler+0x4>

0800047a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <MemManage_Handler+0x4>

08000486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <UsageFault_Handler+0x4>

08000492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f9a7 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <_sbrk+0x5c>)
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_sbrk+0x60>)
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <_sbrk+0x64>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <_sbrk+0x68>)
 80004e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d207      	bcs.n	8000504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f4:	f001 fb16 	bl	8001b24 <__errno>
 80004f8:	4603      	mov	r3, r0
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	e009      	b.n	8000518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <_sbrk+0x64>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <_sbrk+0x64>)
 8000514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20005000 	.word	0x20005000
 8000524:	00000400 	.word	0x00000400
 8000528:	2000011c 	.word	0x2000011c
 800052c:	20000138 	.word	0x20000138

08000530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053c:	f7ff fff8 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000542:	490c      	ldr	r1, [pc, #48]	; (8000574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000558:	4c09      	ldr	r4, [pc, #36]	; (8000580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 fae3 	bl	8001b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fdef 	bl	800014c <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000578:	0800250c 	.word	0x0800250c
  ldr r2, =_sbss
 800057c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000580:	20000134 	.word	0x20000134

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>

08000586 <Keypad_Get_Inputs>:
 *
 */

#include "Matrix_Keypad.h"

static uint16_t Keypad_Get_Inputs(Matrix_Keypad_t *Keypad) {
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	uint16_t Input = Keypad->InputPort->IDR & Keypad->IP_Mask;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	8a5b      	ldrh	r3, [r3, #18]
 800059a:	4013      	ands	r3, r2
 800059c:	81fb      	strh	r3, [r7, #14]
	return (Input >> Keypad->InputStartingPin);
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7c12      	ldrb	r2, [r2, #16]
 80005a4:	4113      	asrs	r3, r2
 80005a6:	b29b      	uxth	r3, r3

}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <Keypad_Set_Outputs>:

static void Keypad_Set_Outputs(Matrix_Keypad_t *Keypad, uint8_t OutputState) {
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]

	Keypad->OutputPort->BRR |= Keypad->OP_Mask;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	8a9b      	ldrh	r3, [r3, #20]
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	615a      	str	r2, [r3, #20]
	Keypad->OutputPort->BSRR |= (OutputState << Keypad->OutputStartingPin);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	691a      	ldr	r2, [r3, #16]
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	7c49      	ldrb	r1, [r1, #17]
 80005de:	408b      	lsls	r3, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	430a      	orrs	r2, r1
 80005e8:	611a      	str	r2, [r3, #16]

}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <Keypad_Delay>:

static void Keypad_Delay(uint32_t delay_ms) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f921 	bl	8000844 <HAL_Delay>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *Keypad) {
 800060a:	b580      	push	{r7, lr}
 800060c:	b08a      	sub	sp, #40	; 0x28
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef Config;

	uint8_t Pins = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for (int x = 0; x < Keypad->Columns; x++) {
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
 800061c:	e011      	b.n	8000642 <Keypad_Init+0x38>

		Pins |= 1 << (Keypad->InputStartingPin + x);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7c1b      	ldrb	r3, [r3, #16]
 8000622:	461a      	mov	r2, r3
 8000624:	6a3b      	ldr	r3, [r7, #32]
 8000626:	4413      	add	r3, r2
 8000628:	2201      	movs	r2, #1
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b25a      	sxtb	r2, r3
 8000630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int x = 0; x < Keypad->Columns; x++) {
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	3301      	adds	r3, #1
 8000640:	623b      	str	r3, [r7, #32]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	461a      	mov	r2, r3
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	4293      	cmp	r3, r2
 800064c:	dbe7      	blt.n	800061e <Keypad_Init+0x14>
	}

	Keypad->IP_Mask = Pins;
 800064e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000652:	b29a      	uxth	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	825a      	strh	r2, [r3, #18]

	Config.Pin = Pins;
 8000658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800065c:	60fb      	str	r3, [r7, #12]
	Config.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
	Config.Pull = GPIO_PULLDOWN;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Keypad->InputPort, &Config);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f107 020c 	add.w	r2, r7, #12
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f9ef 	bl	8000a54 <HAL_GPIO_Init>

	Pins = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for (int x = 0; x < Keypad->Rows; x++) {
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	e011      	b.n	80006a6 <Keypad_Init+0x9c>

		Pins |= 1 << (Keypad->OutputStartingPin + x);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7c5b      	ldrb	r3, [r3, #17]
 8000686:	461a      	mov	r2, r3
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	4413      	add	r3, r2
 800068c:	2201      	movs	r2, #1
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	b25a      	sxtb	r2, r3
 8000694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000698:	4313      	orrs	r3, r2
 800069a:	b25b      	sxtb	r3, r3
 800069c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int x = 0; x < Keypad->Rows; x++) {
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	3301      	adds	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dbe7      	blt.n	8000682 <Keypad_Init+0x78>
	}

	Keypad->OP_Mask = Pins;
 80006b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	829a      	strh	r2, [r3, #20]

	Config.Pin = Pins;
 80006bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c0:	60fb      	str	r3, [r7, #12]
	Config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
	Config.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Keypad->OutputPort, &Config);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f9bd 	bl	8000a54 <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *Keypad) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	uint32_t TempKeys = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (Keypad->Rows - 1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	2201      	movs	r2, #1
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	813b      	strh	r3, [r7, #8]

	do {
		TempKeys <<= Keypad->Columns;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	461a      	mov	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4093      	lsls	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
		Keypad_Set_Outputs(Keypad, OutputStat);
 800070c:	897b      	ldrh	r3, [r7, #10]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff4d 	bl	80005b2 <Keypad_Set_Outputs>

		Keypad_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff ff6b 	bl	80005f4 <Keypad_Delay>

		TempKeys |= Keypad_Get_Inputs(Keypad);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff31 	bl	8000586 <Keypad_Get_Inputs>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4313      	orrs	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 800072e:	897b      	ldrh	r3, [r7, #10]
 8000730:	085b      	lsrs	r3, r3, #1
 8000732:	817b      	strh	r3, [r7, #10]
		x++;
 8000734:	893b      	ldrh	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	813b      	strh	r3, [r7, #8]

	} while (x < Keypad->Rows);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	893a      	ldrh	r2, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3dc      	bcc.n	8000700 <Keypad_Refresh+0x1e>

}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *Keypad, uint8_t Key) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
	return (Keypad->KeysStatus & (1 << Key) ? 1 : 0);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	4013      	ands	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	bf14      	ite	ne
 800076e:	2301      	movne	r3, #1
 8000770:	2300      	moveq	r3, #0
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f92b 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fdec 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f935 	bl	8000a3a <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f90b 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000018 	.word	0x20000018
 8000804:	20000020 	.word	0x20000020
 8000808:	2000001c 	.word	0x2000001c

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000020 	.word	0x20000020
 800082c:	20000120 	.word	0x20000120

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000120 	.word	0x20000120

08000844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff fff0 	bl	8000830 <HAL_GetTick>
 8000850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085c:	d005      	beq.n	800086a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_Delay+0x44>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086a:	bf00      	nop
 800086c:	f7ff ffe0 	bl	8000830 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f7      	bhi.n	800086c <HAL_Delay+0x28>
  {
  }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000020 	.word	0x20000020

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f7ff ff90 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff49 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff5e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff90 	bl	8000944 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5f 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffb0 	bl	80009a8 <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	e169      	b.n	8000d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	f040 8158 	bne.w	8000d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4a9a      	ldr	r2, [pc, #616]	; (8000cf4 <HAL_GPIO_Init+0x2a0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d05e      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000a90:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <HAL_GPIO_Init+0x2a0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d875      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000a96:	4a98      	ldr	r2, [pc, #608]	; (8000cf8 <HAL_GPIO_Init+0x2a4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d058      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000a9c:	4a96      	ldr	r2, [pc, #600]	; (8000cf8 <HAL_GPIO_Init+0x2a4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d86f      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a96      	ldr	r2, [pc, #600]	; (8000cfc <HAL_GPIO_Init+0x2a8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d052      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000aa8:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x2a8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d869      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aae:	4a94      	ldr	r2, [pc, #592]	; (8000d00 <HAL_GPIO_Init+0x2ac>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d04c      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000ab4:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x2ac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d863      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aba:	4a92      	ldr	r2, [pc, #584]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d046      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000ac0:	4a90      	ldr	r2, [pc, #576]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d85d      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d82a      	bhi.n	8000b20 <HAL_GPIO_Init+0xcc>
 8000aca:	2b12      	cmp	r3, #18
 8000acc:	d859      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <HAL_GPIO_Init+0x80>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000b4f 	.word	0x08000b4f
 8000ad8:	08000b29 	.word	0x08000b29
 8000adc:	08000b3b 	.word	0x08000b3b
 8000ae0:	08000b7d 	.word	0x08000b7d
 8000ae4:	08000b83 	.word	0x08000b83
 8000ae8:	08000b83 	.word	0x08000b83
 8000aec:	08000b83 	.word	0x08000b83
 8000af0:	08000b83 	.word	0x08000b83
 8000af4:	08000b83 	.word	0x08000b83
 8000af8:	08000b83 	.word	0x08000b83
 8000afc:	08000b83 	.word	0x08000b83
 8000b00:	08000b83 	.word	0x08000b83
 8000b04:	08000b83 	.word	0x08000b83
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b83 	.word	0x08000b83
 8000b10:	08000b83 	.word	0x08000b83
 8000b14:	08000b83 	.word	0x08000b83
 8000b18:	08000b31 	.word	0x08000b31
 8000b1c:	08000b45 	.word	0x08000b45
 8000b20:	4a79      	ldr	r2, [pc, #484]	; (8000d08 <HAL_GPIO_Init+0x2b4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d013      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b26:	e02c      	b.n	8000b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e029      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	3304      	adds	r3, #4
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e024      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	3308      	adds	r3, #8
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e01f      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	330c      	adds	r3, #12
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e01a      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b56:	2304      	movs	r3, #4
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e013      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d105      	bne.n	8000b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	611a      	str	r2, [r3, #16]
          break;
 8000b6e:	e009      	b.n	8000b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b70:	2308      	movs	r3, #8
 8000b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	615a      	str	r2, [r3, #20]
          break;
 8000b7a:	e003      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          break;
 8000b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d801      	bhi.n	8000b8e <HAL_GPIO_Init+0x13a>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	e001      	b.n	8000b92 <HAL_GPIO_Init+0x13e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3304      	adds	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d802      	bhi.n	8000ba0 <HAL_GPIO_Init+0x14c>
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	3b08      	subs	r3, #8
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	210f      	movs	r1, #15
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	6a39      	ldr	r1, [r7, #32]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 80b1 	beq.w	8000d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2bc>)
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <HAL_GPIO_Init+0x2c0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x1ec>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a3f      	ldr	r2, [pc, #252]	; (8000d18 <HAL_GPIO_Init+0x2c4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1e8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <HAL_GPIO_Init+0x2c8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1e4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <HAL_GPIO_Init+0x2cc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1e0>
 8000c30:	2303      	movs	r3, #3
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e004      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c40:	2300      	movs	r3, #0
 8000c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c52:	492f      	ldr	r1, [pc, #188]	; (8000d10 <HAL_GPIO_Init+0x2bc>)
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	492c      	ldr	r1, [pc, #176]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4928      	ldr	r1, [pc, #160]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	4922      	ldr	r1, [pc, #136]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	60cb      	str	r3, [r1, #12]
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	491e      	ldr	r1, [pc, #120]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4918      	ldr	r1, [pc, #96]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4914      	ldr	r1, [pc, #80]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d021      	beq.n	8000d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	490e      	ldr	r1, [pc, #56]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	600b      	str	r3, [r1, #0]
 8000cf0:	e021      	b.n	8000d36 <HAL_GPIO_Init+0x2e2>
 8000cf2:	bf00      	nop
 8000cf4:	10320000 	.word	0x10320000
 8000cf8:	10310000 	.word	0x10310000
 8000cfc:	10220000 	.word	0x10220000
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10120000 	.word	0x10120000
 8000d08:	10110000 	.word	0x10110000
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40011400 	.word	0x40011400
 8000d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_GPIO_Init+0x304>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <HAL_GPIO_Init+0x304>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	3301      	adds	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f47f ae8e 	bne.w	8000a68 <HAL_GPIO_Init+0x14>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	372c      	adds	r7, #44	; 0x2c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d78:	e003      	b.n	8000d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	041a      	lsls	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e272      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8087 	beq.w	8000eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00c      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d112      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd0:	d10b      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd2:	4b89      	ldr	r3, [pc, #548]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d06c      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d168      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e24c      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x76>
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a7f      	ldr	r2, [pc, #508]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e02e      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x98>
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a7a      	ldr	r2, [pc, #488]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0xbc>
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a67      	ldr	r2, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fce2 	bl	8000830 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fcde 	bl	8000830 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e200      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0xe4>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fcce 	bl	8000830 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fcca 	bl	8000830 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1ec      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x10c>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d063      	beq.n	8000f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec6:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed2:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d11c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e1c0      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4939      	ldr	r1, [pc, #228]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e03a      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d020      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc83 	bl	8000830 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fc7f 	bl	8000830 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e1a1      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4927      	ldr	r1, [pc, #156]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc62 	bl	8000830 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc5e 	bl	8000830 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e180      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d03a      	beq.n	8001010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d019      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fc42 	bl	8000830 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc3e 	bl	8000830 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e160      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 face 	bl	8001570 <RCC_Delay>
 8000fd4:	e01c      	b.n	8001010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc28 	bl	8000830 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe2:	e00f      	b.n	8001004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fc24 	bl	8000830 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d908      	bls.n	8001004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e146      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	42420000 	.word	0x42420000
 8001000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e9      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a6 	beq.w	800116a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b8b      	ldr	r3, [pc, #556]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10d      	bne.n	800104a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b88      	ldr	r3, [pc, #544]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a87      	ldr	r2, [pc, #540]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b85      	ldr	r3, [pc, #532]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4b82      	ldr	r3, [pc, #520]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d118      	bne.n	8001088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7e      	ldr	r2, [pc, #504]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001062:	f7ff fbe5 	bl	8000830 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106a:	f7ff fbe1 	bl	8000830 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e103      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b75      	ldr	r3, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x312>
 8001090:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e02d      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x334>
 80010a6:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a69      	ldr	r2, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	e01c      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x356>
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a60      	ldr	r2, [pc, #384]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a5d      	ldr	r2, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	e00b      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a5a      	ldr	r2, [pc, #360]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d015      	beq.n	800112e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fb95 	bl	8000830 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb91 	bl	8000830 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0b1      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ee      	beq.n	800110a <HAL_RCC_OscConfig+0x37e>
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb7f 	bl	8000830 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb7b 	bl	8000830 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e09b      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1ee      	bne.n	8001136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8087 	beq.w	8001282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d061      	beq.n	8001244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d146      	bne.n	8001216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fb4f 	bl	8000830 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fb4b 	bl	8000830 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e06d      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d108      	bne.n	80011d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4921      	ldr	r1, [pc, #132]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a19      	ldr	r1, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	430b      	orrs	r3, r1
 80011e2:	491b      	ldr	r1, [pc, #108]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fb1f 	bl	8000830 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff fb1b 	bl	8000830 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e03d      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46a>
 8001214:	e035      	b.n	8001282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fb08 	bl	8000830 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff fb04 	bl	8000830 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e026      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x498>
 8001242:	e01e      	b.n	8001282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d107      	bne.n	800125c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e019      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x500>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0d0      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d910      	bls.n	80012d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 0207 	bic.w	r2, r3, #7
 80012ba:	4965      	ldr	r1, [pc, #404]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0b8      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800130e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	494d      	ldr	r1, [pc, #308]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d040      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e07f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e073      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06b      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 0203 	bic.w	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4936      	ldr	r1, [pc, #216]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001380:	f7ff fa56 	bl	8000830 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001386:	e00a      	b.n	800139e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f7ff fa52 	bl	8000830 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e053      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 020c 	and.w	r2, r3, #12
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1eb      	bne.n	8001388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d210      	bcs.n	80013e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4922      	ldr	r1, [pc, #136]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e032      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4916      	ldr	r1, [pc, #88]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141e:	f000 f821 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 8001422:	4602      	mov	r2, r0
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <HAL_RCC_ClockConfig+0x1c8>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_RCC_ClockConfig+0x1cc>)
 8001438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1d0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9b4 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000
 8001454:	40021000 	.word	0x40021000
 8001458:	080024a4 	.word	0x080024a4
 800145c:	20000018 	.word	0x20000018
 8001460:	2000001c 	.word	0x2000001c

08001464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d002      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x30>
 800148e:	2b08      	cmp	r3, #8
 8001490:	d003      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0x36>
 8001492:	e027      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001496:	613b      	str	r3, [r7, #16]
      break;
 8001498:	e027      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d010      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0c5b      	lsrs	r3, r3, #17
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_RCC_GetSysClockFreq+0x98>)
 80014c6:	fb03 f202 	mul.w	r2, r3, r2
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e004      	b.n	80014de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	613b      	str	r3, [r7, #16]
      break;
 80014e2:	e002      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RCC_GetSysClockFreq+0x98>)
 80014e6:	613b      	str	r3, [r7, #16]
      break;
 80014e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ea:	693b      	ldr	r3, [r7, #16]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	007a1200 	.word	0x007a1200
 8001500:	080024bc 	.word	0x080024bc
 8001504:	080024cc 	.word	0x080024cc
 8001508:	003d0900 	.word	0x003d0900

0800150c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_RCC_GetHCLKFreq+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000018 	.word	0x20000018

08001520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001524:	f7ff fff2 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	080024b4 	.word	0x080024b4

08001548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800154c:	f7ff ffde 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0adb      	lsrs	r3, r3, #11
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	4903      	ldr	r1, [pc, #12]	; (800156c <HAL_RCC_GetPCLK2Freq+0x24>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001564:	4618      	mov	r0, r3
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	080024b4 	.word	0x080024b4

08001570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <RCC_Delay+0x34>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <RCC_Delay+0x38>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0a5b      	lsrs	r3, r3, #9
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800158c:	bf00      	nop
  }
  while (Delay --);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1e5a      	subs	r2, r3, #1
 8001592:	60fa      	str	r2, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f9      	bne.n	800158c <RCC_Delay+0x1c>
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000018 	.word	0x20000018
 80015a8:	10624dd3 	.word	0x10624dd3

080015ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e04d      	b.n	800165a <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d111      	bne.n	80015ee <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f926 	bl	8001824 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_UART_Init+0xb8>)
 80015e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2224      	movs	r2, #36	; 0x24
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001604:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f9fe 	bl	8001a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800161a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800162a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800163a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	080003dd 	.word	0x080003dd

08001668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b20      	cmp	r3, #32
 8001686:	d175      	bne.n	8001774 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_UART_Transmit+0x2c>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e06e      	b.n	8001776 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016a6:	f7ff f8c3 	bl	8000830 <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c0:	d108      	bne.n	80016d4 <HAL_UART_Transmit+0x6c>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e003      	b.n	80016dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80016dc:	e02e      	b.n	800173c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f8d1 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03a      	b.n	8001776 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	3302      	adds	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	e007      	b.n	800172e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	3301      	adds	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1cb      	bne.n	80016de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f89d 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e006      	b.n	8001776 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <UART_InitCallbacksToDefault+0x48>)
 8001830:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <UART_InitCallbacksToDefault+0x4c>)
 8001836:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <UART_InitCallbacksToDefault+0x50>)
 800183c:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <UART_InitCallbacksToDefault+0x54>)
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a0d      	ldr	r2, [pc, #52]	; (800187c <UART_InitCallbacksToDefault+0x58>)
 8001848:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <UART_InitCallbacksToDefault+0x5c>)
 800184e:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <UART_InitCallbacksToDefault+0x60>)
 8001854:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <UART_InitCallbacksToDefault+0x64>)
 800185a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <UART_InitCallbacksToDefault+0x68>)
 8001860:	66da      	str	r2, [r3, #108]	; 0x6c

}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	08001791 	.word	0x08001791
 8001870:	0800177f 	.word	0x0800177f
 8001874:	080017b5 	.word	0x080017b5
 8001878:	080017a3 	.word	0x080017a3
 800187c:	080017c7 	.word	0x080017c7
 8001880:	080017d9 	.word	0x080017d9
 8001884:	080017eb 	.word	0x080017eb
 8001888:	080017fd 	.word	0x080017fd
 800188c:	0800180f 	.word	0x0800180f

08001890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018a0:	e03b      	b.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d037      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018aa:	f7fe ffc1 	bl	8000830 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d302      	bcc.n	80018c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e03a      	b.n	800193a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d023      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d020      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b40      	cmp	r3, #64	; 0x40
 80018dc:	d01d      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d116      	bne.n	800191a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f81d 	bl	8001942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2208      	movs	r2, #8
 800190c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4013      	ands	r3, r2
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	429a      	cmp	r2, r3
 8001936:	d0b4      	beq.n	80018a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001942:	b480      	push	{r7}
 8001944:	b095      	sub	sp, #84	; 0x54
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	330c      	adds	r3, #12
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	e853 3f00 	ldrex	r3, [r3]
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	330c      	adds	r3, #12
 8001968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800196a:	643a      	str	r2, [r7, #64]	; 0x40
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800196e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001972:	e841 2300 	strex	r3, r2, [r1]
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1e5      	bne.n	800194a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3314      	adds	r3, #20
 8001984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	e853 3f00 	ldrex	r3, [r3]
 800198c:	61fb      	str	r3, [r7, #28]
   return(result);
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3314      	adds	r3, #20
 800199c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800199e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a6:	e841 2300 	strex	r3, r2, [r1]
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1e5      	bne.n	800197e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d119      	bne.n	80019ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	330c      	adds	r3, #12
 80019c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	e853 3f00 	ldrex	r3, [r3]
 80019c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f023 0310 	bic.w	r3, r3, #16
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	330c      	adds	r3, #12
 80019d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019da:	61ba      	str	r2, [r7, #24]
 80019dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019de:	6979      	ldr	r1, [r7, #20]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	e841 2300 	strex	r3, r2, [r1]
 80019e6:	613b      	str	r3, [r7, #16]
   return(result);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e5      	bne.n	80019ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80019fc:	bf00      	nop
 80019fe:	3754      	adds	r7, #84	; 0x54
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a42:	f023 030c 	bic.w	r3, r3, #12
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <UART_SetConfig+0x114>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d103      	bne.n	8001a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a70:	f7ff fd6a 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	e002      	b.n	8001a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a78:	f7ff fd52 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
 8001a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <UART_SetConfig+0x118>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	0119      	lsls	r1, r3, #4
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <UART_SetConfig+0x118>)
 8001ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2064      	movs	r0, #100	; 0x64
 8001abe:	fb00 f303 	mul.w	r3, r0, r3
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	3332      	adds	r3, #50	; 0x32
 8001ac8:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <UART_SetConfig+0x118>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad4:	4419      	add	r1, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009a      	lsls	r2, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <UART_SetConfig+0x118>)
 8001aee:	fba3 0302 	umull	r0, r3, r3, r2
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	3332      	adds	r3, #50	; 0x32
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <UART_SetConfig+0x118>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	440a      	add	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	51eb851f 	.word	0x51eb851f

08001b24 <__errno>:
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <__errno+0x8>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000024 	.word	0x20000024

08001b30 <__libc_init_array>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2600      	movs	r6, #0
 8001b34:	4d0c      	ldr	r5, [pc, #48]	; (8001b68 <__libc_init_array+0x38>)
 8001b36:	4c0d      	ldr	r4, [pc, #52]	; (8001b6c <__libc_init_array+0x3c>)
 8001b38:	1b64      	subs	r4, r4, r5
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	42a6      	cmp	r6, r4
 8001b3e:	d109      	bne.n	8001b54 <__libc_init_array+0x24>
 8001b40:	f000 fc9c 	bl	800247c <_init>
 8001b44:	2600      	movs	r6, #0
 8001b46:	4d0a      	ldr	r5, [pc, #40]	; (8001b70 <__libc_init_array+0x40>)
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <__libc_init_array+0x44>)
 8001b4a:	1b64      	subs	r4, r4, r5
 8001b4c:	10a4      	asrs	r4, r4, #2
 8001b4e:	42a6      	cmp	r6, r4
 8001b50:	d105      	bne.n	8001b5e <__libc_init_array+0x2e>
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b58:	4798      	blx	r3
 8001b5a:	3601      	adds	r6, #1
 8001b5c:	e7ee      	b.n	8001b3c <__libc_init_array+0xc>
 8001b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b62:	4798      	blx	r3
 8001b64:	3601      	adds	r6, #1
 8001b66:	e7f2      	b.n	8001b4e <__libc_init_array+0x1e>
 8001b68:	08002504 	.word	0x08002504
 8001b6c:	08002504 	.word	0x08002504
 8001b70:	08002504 	.word	0x08002504
 8001b74:	08002508 	.word	0x08002508

08001b78 <memset>:
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4402      	add	r2, r0
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <memset+0xa>
 8001b80:	4770      	bx	lr
 8001b82:	f803 1b01 	strb.w	r1, [r3], #1
 8001b86:	e7f9      	b.n	8001b7c <memset+0x4>

08001b88 <siprintf>:
 8001b88:	b40e      	push	{r1, r2, r3}
 8001b8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b8e:	b500      	push	{lr}
 8001b90:	b09c      	sub	sp, #112	; 0x70
 8001b92:	ab1d      	add	r3, sp, #116	; 0x74
 8001b94:	9002      	str	r0, [sp, #8]
 8001b96:	9006      	str	r0, [sp, #24]
 8001b98:	9107      	str	r1, [sp, #28]
 8001b9a:	9104      	str	r1, [sp, #16]
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <siprintf+0x38>)
 8001b9e:	4909      	ldr	r1, [pc, #36]	; (8001bc4 <siprintf+0x3c>)
 8001ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ba4:	9105      	str	r1, [sp, #20]
 8001ba6:	6800      	ldr	r0, [r0, #0]
 8001ba8:	a902      	add	r1, sp, #8
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	f000 f868 	bl	8001c80 <_svfiprintf_r>
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	9b02      	ldr	r3, [sp, #8]
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	b01c      	add	sp, #112	; 0x70
 8001bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bbc:	b003      	add	sp, #12
 8001bbe:	4770      	bx	lr
 8001bc0:	20000024 	.word	0x20000024
 8001bc4:	ffff0208 	.word	0xffff0208

08001bc8 <__ssputs_r>:
 8001bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	688e      	ldr	r6, [r1, #8]
 8001bce:	4682      	mov	sl, r0
 8001bd0:	429e      	cmp	r6, r3
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4690      	mov	r8, r2
 8001bd6:	461f      	mov	r7, r3
 8001bd8:	d838      	bhi.n	8001c4c <__ssputs_r+0x84>
 8001bda:	898a      	ldrh	r2, [r1, #12]
 8001bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001be0:	d032      	beq.n	8001c48 <__ssputs_r+0x80>
 8001be2:	6825      	ldr	r5, [r4, #0]
 8001be4:	6909      	ldr	r1, [r1, #16]
 8001be6:	3301      	adds	r3, #1
 8001be8:	eba5 0901 	sub.w	r9, r5, r1
 8001bec:	6965      	ldr	r5, [r4, #20]
 8001bee:	444b      	add	r3, r9
 8001bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001bf8:	106d      	asrs	r5, r5, #1
 8001bfa:	429d      	cmp	r5, r3
 8001bfc:	bf38      	it	cc
 8001bfe:	461d      	movcc	r5, r3
 8001c00:	0553      	lsls	r3, r2, #21
 8001c02:	d531      	bpl.n	8001c68 <__ssputs_r+0xa0>
 8001c04:	4629      	mov	r1, r5
 8001c06:	f000 fb6f 	bl	80022e8 <_malloc_r>
 8001c0a:	4606      	mov	r6, r0
 8001c0c:	b950      	cbnz	r0, 8001c24 <__ssputs_r+0x5c>
 8001c0e:	230c      	movs	r3, #12
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f8ca 3000 	str.w	r3, [sl]
 8001c18:	89a3      	ldrh	r3, [r4, #12]
 8001c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1e:	81a3      	strh	r3, [r4, #12]
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c24:	464a      	mov	r2, r9
 8001c26:	6921      	ldr	r1, [r4, #16]
 8001c28:	f000 face 	bl	80021c8 <memcpy>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	6126      	str	r6, [r4, #16]
 8001c3a:	444e      	add	r6, r9
 8001c3c:	6026      	str	r6, [r4, #0]
 8001c3e:	463e      	mov	r6, r7
 8001c40:	6165      	str	r5, [r4, #20]
 8001c42:	eba5 0509 	sub.w	r5, r5, r9
 8001c46:	60a5      	str	r5, [r4, #8]
 8001c48:	42be      	cmp	r6, r7
 8001c4a:	d900      	bls.n	8001c4e <__ssputs_r+0x86>
 8001c4c:	463e      	mov	r6, r7
 8001c4e:	4632      	mov	r2, r6
 8001c50:	4641      	mov	r1, r8
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	f000 fac6 	bl	80021e4 <memmove>
 8001c58:	68a3      	ldr	r3, [r4, #8]
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	1b9b      	subs	r3, r3, r6
 8001c5e:	60a3      	str	r3, [r4, #8]
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	4433      	add	r3, r6
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	e7db      	b.n	8001c20 <__ssputs_r+0x58>
 8001c68:	462a      	mov	r2, r5
 8001c6a:	f000 fbb1 	bl	80023d0 <_realloc_r>
 8001c6e:	4606      	mov	r6, r0
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d1e1      	bne.n	8001c38 <__ssputs_r+0x70>
 8001c74:	4650      	mov	r0, sl
 8001c76:	6921      	ldr	r1, [r4, #16]
 8001c78:	f000 face 	bl	8002218 <_free_r>
 8001c7c:	e7c7      	b.n	8001c0e <__ssputs_r+0x46>
	...

08001c80 <_svfiprintf_r>:
 8001c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c84:	4698      	mov	r8, r3
 8001c86:	898b      	ldrh	r3, [r1, #12]
 8001c88:	4607      	mov	r7, r0
 8001c8a:	061b      	lsls	r3, r3, #24
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	4614      	mov	r4, r2
 8001c90:	b09d      	sub	sp, #116	; 0x74
 8001c92:	d50e      	bpl.n	8001cb2 <_svfiprintf_r+0x32>
 8001c94:	690b      	ldr	r3, [r1, #16]
 8001c96:	b963      	cbnz	r3, 8001cb2 <_svfiprintf_r+0x32>
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	f000 fb25 	bl	80022e8 <_malloc_r>
 8001c9e:	6028      	str	r0, [r5, #0]
 8001ca0:	6128      	str	r0, [r5, #16]
 8001ca2:	b920      	cbnz	r0, 8001cae <_svfiprintf_r+0x2e>
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	e0d1      	b.n	8001e52 <_svfiprintf_r+0x1d2>
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	616b      	str	r3, [r5, #20]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cbc:	2330      	movs	r3, #48	; 0x30
 8001cbe:	f04f 0901 	mov.w	r9, #1
 8001cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001e6c <_svfiprintf_r+0x1ec>
 8001cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cce:	4623      	mov	r3, r4
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cd6:	b10a      	cbz	r2, 8001cdc <_svfiprintf_r+0x5c>
 8001cd8:	2a25      	cmp	r2, #37	; 0x25
 8001cda:	d1f9      	bne.n	8001cd0 <_svfiprintf_r+0x50>
 8001cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8001ce0:	d00b      	beq.n	8001cfa <_svfiprintf_r+0x7a>
 8001ce2:	465b      	mov	r3, fp
 8001ce4:	4622      	mov	r2, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	4638      	mov	r0, r7
 8001cea:	f7ff ff6d 	bl	8001bc8 <__ssputs_r>
 8001cee:	3001      	adds	r0, #1
 8001cf0:	f000 80aa 	beq.w	8001e48 <_svfiprintf_r+0x1c8>
 8001cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cf6:	445a      	add	r2, fp
 8001cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8001cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a2 	beq.w	8001e48 <_svfiprintf_r+0x1c8>
 8001d04:	2300      	movs	r3, #0
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d0e:	f10a 0a01 	add.w	sl, sl, #1
 8001d12:	9304      	str	r3, [sp, #16]
 8001d14:	9307      	str	r3, [sp, #28]
 8001d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d1c:	4654      	mov	r4, sl
 8001d1e:	2205      	movs	r2, #5
 8001d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d24:	4851      	ldr	r0, [pc, #324]	; (8001e6c <_svfiprintf_r+0x1ec>)
 8001d26:	f000 fa41 	bl	80021ac <memchr>
 8001d2a:	9a04      	ldr	r2, [sp, #16]
 8001d2c:	b9d8      	cbnz	r0, 8001d66 <_svfiprintf_r+0xe6>
 8001d2e:	06d0      	lsls	r0, r2, #27
 8001d30:	bf44      	itt	mi
 8001d32:	2320      	movmi	r3, #32
 8001d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d38:	0711      	lsls	r1, r2, #28
 8001d3a:	bf44      	itt	mi
 8001d3c:	232b      	movmi	r3, #43	; 0x2b
 8001d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d42:	f89a 3000 	ldrb.w	r3, [sl]
 8001d46:	2b2a      	cmp	r3, #42	; 0x2a
 8001d48:	d015      	beq.n	8001d76 <_svfiprintf_r+0xf6>
 8001d4a:	4654      	mov	r4, sl
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f04f 0c0a 	mov.w	ip, #10
 8001d52:	9a07      	ldr	r2, [sp, #28]
 8001d54:	4621      	mov	r1, r4
 8001d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d5a:	3b30      	subs	r3, #48	; 0x30
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d94e      	bls.n	8001dfe <_svfiprintf_r+0x17e>
 8001d60:	b1b0      	cbz	r0, 8001d90 <_svfiprintf_r+0x110>
 8001d62:	9207      	str	r2, [sp, #28]
 8001d64:	e014      	b.n	8001d90 <_svfiprintf_r+0x110>
 8001d66:	eba0 0308 	sub.w	r3, r0, r8
 8001d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	46a2      	mov	sl, r4
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	e7d2      	b.n	8001d1c <_svfiprintf_r+0x9c>
 8001d76:	9b03      	ldr	r3, [sp, #12]
 8001d78:	1d19      	adds	r1, r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	9103      	str	r1, [sp, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bfbb      	ittet	lt
 8001d82:	425b      	neglt	r3, r3
 8001d84:	f042 0202 	orrlt.w	r2, r2, #2
 8001d88:	9307      	strge	r3, [sp, #28]
 8001d8a:	9307      	strlt	r3, [sp, #28]
 8001d8c:	bfb8      	it	lt
 8001d8e:	9204      	strlt	r2, [sp, #16]
 8001d90:	7823      	ldrb	r3, [r4, #0]
 8001d92:	2b2e      	cmp	r3, #46	; 0x2e
 8001d94:	d10c      	bne.n	8001db0 <_svfiprintf_r+0x130>
 8001d96:	7863      	ldrb	r3, [r4, #1]
 8001d98:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9a:	d135      	bne.n	8001e08 <_svfiprintf_r+0x188>
 8001d9c:	9b03      	ldr	r3, [sp, #12]
 8001d9e:	3402      	adds	r4, #2
 8001da0:	1d1a      	adds	r2, r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	9203      	str	r2, [sp, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bfb8      	it	lt
 8001daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dae:	9305      	str	r3, [sp, #20]
 8001db0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001e70 <_svfiprintf_r+0x1f0>
 8001db4:	2203      	movs	r2, #3
 8001db6:	4650      	mov	r0, sl
 8001db8:	7821      	ldrb	r1, [r4, #0]
 8001dba:	f000 f9f7 	bl	80021ac <memchr>
 8001dbe:	b140      	cbz	r0, 8001dd2 <_svfiprintf_r+0x152>
 8001dc0:	2340      	movs	r3, #64	; 0x40
 8001dc2:	eba0 000a 	sub.w	r0, r0, sl
 8001dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8001dca:	9b04      	ldr	r3, [sp, #16]
 8001dcc:	3401      	adds	r4, #1
 8001dce:	4303      	orrs	r3, r0
 8001dd0:	9304      	str	r3, [sp, #16]
 8001dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	4826      	ldr	r0, [pc, #152]	; (8001e74 <_svfiprintf_r+0x1f4>)
 8001dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dde:	f000 f9e5 	bl	80021ac <memchr>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d038      	beq.n	8001e58 <_svfiprintf_r+0x1d8>
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <_svfiprintf_r+0x1f8>)
 8001de8:	bb1b      	cbnz	r3, 8001e32 <_svfiprintf_r+0x1b2>
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	3307      	adds	r3, #7
 8001dee:	f023 0307 	bic.w	r3, r3, #7
 8001df2:	3308      	adds	r3, #8
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df8:	4433      	add	r3, r6
 8001dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8001dfc:	e767      	b.n	8001cce <_svfiprintf_r+0x4e>
 8001dfe:	460c      	mov	r4, r1
 8001e00:	2001      	movs	r0, #1
 8001e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e06:	e7a5      	b.n	8001d54 <_svfiprintf_r+0xd4>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f04f 0c0a 	mov.w	ip, #10
 8001e0e:	4619      	mov	r1, r3
 8001e10:	3401      	adds	r4, #1
 8001e12:	9305      	str	r3, [sp, #20]
 8001e14:	4620      	mov	r0, r4
 8001e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e1a:	3a30      	subs	r2, #48	; 0x30
 8001e1c:	2a09      	cmp	r2, #9
 8001e1e:	d903      	bls.n	8001e28 <_svfiprintf_r+0x1a8>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0c5      	beq.n	8001db0 <_svfiprintf_r+0x130>
 8001e24:	9105      	str	r1, [sp, #20]
 8001e26:	e7c3      	b.n	8001db0 <_svfiprintf_r+0x130>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e30:	e7f0      	b.n	8001e14 <_svfiprintf_r+0x194>
 8001e32:	ab03      	add	r3, sp, #12
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	462a      	mov	r2, r5
 8001e38:	4638      	mov	r0, r7
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_svfiprintf_r+0x1fc>)
 8001e3c:	a904      	add	r1, sp, #16
 8001e3e:	f3af 8000 	nop.w
 8001e42:	1c42      	adds	r2, r0, #1
 8001e44:	4606      	mov	r6, r0
 8001e46:	d1d6      	bne.n	8001df6 <_svfiprintf_r+0x176>
 8001e48:	89ab      	ldrh	r3, [r5, #12]
 8001e4a:	065b      	lsls	r3, r3, #25
 8001e4c:	f53f af2c 	bmi.w	8001ca8 <_svfiprintf_r+0x28>
 8001e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e52:	b01d      	add	sp, #116	; 0x74
 8001e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e58:	ab03      	add	r3, sp, #12
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	4638      	mov	r0, r7
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <_svfiprintf_r+0x1fc>)
 8001e62:	a904      	add	r1, sp, #16
 8001e64:	f000 f87c 	bl	8001f60 <_printf_i>
 8001e68:	e7eb      	b.n	8001e42 <_svfiprintf_r+0x1c2>
 8001e6a:	bf00      	nop
 8001e6c:	080024ce 	.word	0x080024ce
 8001e70:	080024d4 	.word	0x080024d4
 8001e74:	080024d8 	.word	0x080024d8
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	08001bc9 	.word	0x08001bc9

08001e80 <_printf_common>:
 8001e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e84:	4616      	mov	r6, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	688a      	ldr	r2, [r1, #8]
 8001e8a:	690b      	ldr	r3, [r1, #16]
 8001e8c:	4607      	mov	r7, r0
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	bfb8      	it	lt
 8001e92:	4613      	movlt	r3, r2
 8001e94:	6033      	str	r3, [r6, #0]
 8001e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea0:	b10a      	cbz	r2, 8001ea6 <_printf_common+0x26>
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	6033      	str	r3, [r6, #0]
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	0699      	lsls	r1, r3, #26
 8001eaa:	bf42      	ittt	mi
 8001eac:	6833      	ldrmi	r3, [r6, #0]
 8001eae:	3302      	addmi	r3, #2
 8001eb0:	6033      	strmi	r3, [r6, #0]
 8001eb2:	6825      	ldr	r5, [r4, #0]
 8001eb4:	f015 0506 	ands.w	r5, r5, #6
 8001eb8:	d106      	bne.n	8001ec8 <_printf_common+0x48>
 8001eba:	f104 0a19 	add.w	sl, r4, #25
 8001ebe:	68e3      	ldr	r3, [r4, #12]
 8001ec0:	6832      	ldr	r2, [r6, #0]
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	42ab      	cmp	r3, r5
 8001ec6:	dc28      	bgt.n	8001f1a <_printf_common+0x9a>
 8001ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ecc:	1e13      	subs	r3, r2, #0
 8001ece:	6822      	ldr	r2, [r4, #0]
 8001ed0:	bf18      	it	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	0692      	lsls	r2, r2, #26
 8001ed6:	d42d      	bmi.n	8001f34 <_printf_common+0xb4>
 8001ed8:	4649      	mov	r1, r9
 8001eda:	4638      	mov	r0, r7
 8001edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ee0:	47c0      	blx	r8
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	d020      	beq.n	8001f28 <_printf_common+0xa8>
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	68e5      	ldr	r5, [r4, #12]
 8001eea:	f003 0306 	and.w	r3, r3, #6
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf18      	it	ne
 8001ef2:	2500      	movne	r5, #0
 8001ef4:	6832      	ldr	r2, [r6, #0]
 8001ef6:	f04f 0600 	mov.w	r6, #0
 8001efa:	68a3      	ldr	r3, [r4, #8]
 8001efc:	bf08      	it	eq
 8001efe:	1aad      	subeq	r5, r5, r2
 8001f00:	6922      	ldr	r2, [r4, #16]
 8001f02:	bf08      	it	eq
 8001f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bfc4      	itt	gt
 8001f0c:	1a9b      	subgt	r3, r3, r2
 8001f0e:	18ed      	addgt	r5, r5, r3
 8001f10:	341a      	adds	r4, #26
 8001f12:	42b5      	cmp	r5, r6
 8001f14:	d11a      	bne.n	8001f4c <_printf_common+0xcc>
 8001f16:	2000      	movs	r0, #0
 8001f18:	e008      	b.n	8001f2c <_printf_common+0xac>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4652      	mov	r2, sl
 8001f1e:	4649      	mov	r1, r9
 8001f20:	4638      	mov	r0, r7
 8001f22:	47c0      	blx	r8
 8001f24:	3001      	adds	r0, #1
 8001f26:	d103      	bne.n	8001f30 <_printf_common+0xb0>
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f30:	3501      	adds	r5, #1
 8001f32:	e7c4      	b.n	8001ebe <_printf_common+0x3e>
 8001f34:	2030      	movs	r0, #48	; 0x30
 8001f36:	18e1      	adds	r1, r4, r3
 8001f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f42:	4422      	add	r2, r4
 8001f44:	3302      	adds	r3, #2
 8001f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f4a:	e7c5      	b.n	8001ed8 <_printf_common+0x58>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	4622      	mov	r2, r4
 8001f50:	4649      	mov	r1, r9
 8001f52:	4638      	mov	r0, r7
 8001f54:	47c0      	blx	r8
 8001f56:	3001      	adds	r0, #1
 8001f58:	d0e6      	beq.n	8001f28 <_printf_common+0xa8>
 8001f5a:	3601      	adds	r6, #1
 8001f5c:	e7d9      	b.n	8001f12 <_printf_common+0x92>
	...

08001f60 <_printf_i>:
 8001f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	7e0f      	ldrb	r7, [r1, #24]
 8001f66:	4691      	mov	r9, r2
 8001f68:	2f78      	cmp	r7, #120	; 0x78
 8001f6a:	4680      	mov	r8, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	469a      	mov	sl, r3
 8001f70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f76:	d807      	bhi.n	8001f88 <_printf_i+0x28>
 8001f78:	2f62      	cmp	r7, #98	; 0x62
 8001f7a:	d80a      	bhi.n	8001f92 <_printf_i+0x32>
 8001f7c:	2f00      	cmp	r7, #0
 8001f7e:	f000 80d9 	beq.w	8002134 <_printf_i+0x1d4>
 8001f82:	2f58      	cmp	r7, #88	; 0x58
 8001f84:	f000 80a4 	beq.w	80020d0 <_printf_i+0x170>
 8001f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f90:	e03a      	b.n	8002008 <_printf_i+0xa8>
 8001f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f96:	2b15      	cmp	r3, #21
 8001f98:	d8f6      	bhi.n	8001f88 <_printf_i+0x28>
 8001f9a:	a101      	add	r1, pc, #4	; (adr r1, 8001fa0 <_printf_i+0x40>)
 8001f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fa0:	08001ff9 	.word	0x08001ff9
 8001fa4:	0800200d 	.word	0x0800200d
 8001fa8:	08001f89 	.word	0x08001f89
 8001fac:	08001f89 	.word	0x08001f89
 8001fb0:	08001f89 	.word	0x08001f89
 8001fb4:	08001f89 	.word	0x08001f89
 8001fb8:	0800200d 	.word	0x0800200d
 8001fbc:	08001f89 	.word	0x08001f89
 8001fc0:	08001f89 	.word	0x08001f89
 8001fc4:	08001f89 	.word	0x08001f89
 8001fc8:	08001f89 	.word	0x08001f89
 8001fcc:	0800211b 	.word	0x0800211b
 8001fd0:	0800203d 	.word	0x0800203d
 8001fd4:	080020fd 	.word	0x080020fd
 8001fd8:	08001f89 	.word	0x08001f89
 8001fdc:	08001f89 	.word	0x08001f89
 8001fe0:	0800213d 	.word	0x0800213d
 8001fe4:	08001f89 	.word	0x08001f89
 8001fe8:	0800203d 	.word	0x0800203d
 8001fec:	08001f89 	.word	0x08001f89
 8001ff0:	08001f89 	.word	0x08001f89
 8001ff4:	08002105 	.word	0x08002105
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	1d1a      	adds	r2, r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	602a      	str	r2, [r5, #0]
 8002000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002008:	2301      	movs	r3, #1
 800200a:	e0a4      	b.n	8002156 <_printf_i+0x1f6>
 800200c:	6820      	ldr	r0, [r4, #0]
 800200e:	6829      	ldr	r1, [r5, #0]
 8002010:	0606      	lsls	r6, r0, #24
 8002012:	f101 0304 	add.w	r3, r1, #4
 8002016:	d50a      	bpl.n	800202e <_printf_i+0xce>
 8002018:	680e      	ldr	r6, [r1, #0]
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	2e00      	cmp	r6, #0
 800201e:	da03      	bge.n	8002028 <_printf_i+0xc8>
 8002020:	232d      	movs	r3, #45	; 0x2d
 8002022:	4276      	negs	r6, r6
 8002024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002028:	230a      	movs	r3, #10
 800202a:	485e      	ldr	r0, [pc, #376]	; (80021a4 <_printf_i+0x244>)
 800202c:	e019      	b.n	8002062 <_printf_i+0x102>
 800202e:	680e      	ldr	r6, [r1, #0]
 8002030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002034:	602b      	str	r3, [r5, #0]
 8002036:	bf18      	it	ne
 8002038:	b236      	sxthne	r6, r6
 800203a:	e7ef      	b.n	800201c <_printf_i+0xbc>
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	6820      	ldr	r0, [r4, #0]
 8002040:	1d19      	adds	r1, r3, #4
 8002042:	6029      	str	r1, [r5, #0]
 8002044:	0601      	lsls	r1, r0, #24
 8002046:	d501      	bpl.n	800204c <_printf_i+0xec>
 8002048:	681e      	ldr	r6, [r3, #0]
 800204a:	e002      	b.n	8002052 <_printf_i+0xf2>
 800204c:	0646      	lsls	r6, r0, #25
 800204e:	d5fb      	bpl.n	8002048 <_printf_i+0xe8>
 8002050:	881e      	ldrh	r6, [r3, #0]
 8002052:	2f6f      	cmp	r7, #111	; 0x6f
 8002054:	bf0c      	ite	eq
 8002056:	2308      	moveq	r3, #8
 8002058:	230a      	movne	r3, #10
 800205a:	4852      	ldr	r0, [pc, #328]	; (80021a4 <_printf_i+0x244>)
 800205c:	2100      	movs	r1, #0
 800205e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002062:	6865      	ldr	r5, [r4, #4]
 8002064:	2d00      	cmp	r5, #0
 8002066:	bfa8      	it	ge
 8002068:	6821      	ldrge	r1, [r4, #0]
 800206a:	60a5      	str	r5, [r4, #8]
 800206c:	bfa4      	itt	ge
 800206e:	f021 0104 	bicge.w	r1, r1, #4
 8002072:	6021      	strge	r1, [r4, #0]
 8002074:	b90e      	cbnz	r6, 800207a <_printf_i+0x11a>
 8002076:	2d00      	cmp	r5, #0
 8002078:	d04d      	beq.n	8002116 <_printf_i+0x1b6>
 800207a:	4615      	mov	r5, r2
 800207c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002080:	fb03 6711 	mls	r7, r3, r1, r6
 8002084:	5dc7      	ldrb	r7, [r0, r7]
 8002086:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800208a:	4637      	mov	r7, r6
 800208c:	42bb      	cmp	r3, r7
 800208e:	460e      	mov	r6, r1
 8002090:	d9f4      	bls.n	800207c <_printf_i+0x11c>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d10b      	bne.n	80020ae <_printf_i+0x14e>
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	07de      	lsls	r6, r3, #31
 800209a:	d508      	bpl.n	80020ae <_printf_i+0x14e>
 800209c:	6923      	ldr	r3, [r4, #16]
 800209e:	6861      	ldr	r1, [r4, #4]
 80020a0:	4299      	cmp	r1, r3
 80020a2:	bfde      	ittt	le
 80020a4:	2330      	movle	r3, #48	; 0x30
 80020a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020ae:	1b52      	subs	r2, r2, r5
 80020b0:	6122      	str	r2, [r4, #16]
 80020b2:	464b      	mov	r3, r9
 80020b4:	4621      	mov	r1, r4
 80020b6:	4640      	mov	r0, r8
 80020b8:	f8cd a000 	str.w	sl, [sp]
 80020bc:	aa03      	add	r2, sp, #12
 80020be:	f7ff fedf 	bl	8001e80 <_printf_common>
 80020c2:	3001      	adds	r0, #1
 80020c4:	d14c      	bne.n	8002160 <_printf_i+0x200>
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	b004      	add	sp, #16
 80020cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d0:	4834      	ldr	r0, [pc, #208]	; (80021a4 <_printf_i+0x244>)
 80020d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80020d6:	6829      	ldr	r1, [r5, #0]
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	f851 6b04 	ldr.w	r6, [r1], #4
 80020de:	6029      	str	r1, [r5, #0]
 80020e0:	061d      	lsls	r5, r3, #24
 80020e2:	d514      	bpl.n	800210e <_printf_i+0x1ae>
 80020e4:	07df      	lsls	r7, r3, #31
 80020e6:	bf44      	itt	mi
 80020e8:	f043 0320 	orrmi.w	r3, r3, #32
 80020ec:	6023      	strmi	r3, [r4, #0]
 80020ee:	b91e      	cbnz	r6, 80020f8 <_printf_i+0x198>
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f023 0320 	bic.w	r3, r3, #32
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	2310      	movs	r3, #16
 80020fa:	e7af      	b.n	800205c <_printf_i+0xfc>
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	6023      	str	r3, [r4, #0]
 8002104:	2378      	movs	r3, #120	; 0x78
 8002106:	4828      	ldr	r0, [pc, #160]	; (80021a8 <_printf_i+0x248>)
 8002108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800210c:	e7e3      	b.n	80020d6 <_printf_i+0x176>
 800210e:	0659      	lsls	r1, r3, #25
 8002110:	bf48      	it	mi
 8002112:	b2b6      	uxthmi	r6, r6
 8002114:	e7e6      	b.n	80020e4 <_printf_i+0x184>
 8002116:	4615      	mov	r5, r2
 8002118:	e7bb      	b.n	8002092 <_printf_i+0x132>
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	6826      	ldr	r6, [r4, #0]
 800211e:	1d18      	adds	r0, r3, #4
 8002120:	6961      	ldr	r1, [r4, #20]
 8002122:	6028      	str	r0, [r5, #0]
 8002124:	0635      	lsls	r5, r6, #24
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	d501      	bpl.n	800212e <_printf_i+0x1ce>
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	e002      	b.n	8002134 <_printf_i+0x1d4>
 800212e:	0670      	lsls	r0, r6, #25
 8002130:	d5fb      	bpl.n	800212a <_printf_i+0x1ca>
 8002132:	8019      	strh	r1, [r3, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	4615      	mov	r5, r2
 8002138:	6123      	str	r3, [r4, #16]
 800213a:	e7ba      	b.n	80020b2 <_printf_i+0x152>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	1d1a      	adds	r2, r3, #4
 8002142:	602a      	str	r2, [r5, #0]
 8002144:	681d      	ldr	r5, [r3, #0]
 8002146:	6862      	ldr	r2, [r4, #4]
 8002148:	4628      	mov	r0, r5
 800214a:	f000 f82f 	bl	80021ac <memchr>
 800214e:	b108      	cbz	r0, 8002154 <_printf_i+0x1f4>
 8002150:	1b40      	subs	r0, r0, r5
 8002152:	6060      	str	r0, [r4, #4]
 8002154:	6863      	ldr	r3, [r4, #4]
 8002156:	6123      	str	r3, [r4, #16]
 8002158:	2300      	movs	r3, #0
 800215a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800215e:	e7a8      	b.n	80020b2 <_printf_i+0x152>
 8002160:	462a      	mov	r2, r5
 8002162:	4649      	mov	r1, r9
 8002164:	4640      	mov	r0, r8
 8002166:	6923      	ldr	r3, [r4, #16]
 8002168:	47d0      	blx	sl
 800216a:	3001      	adds	r0, #1
 800216c:	d0ab      	beq.n	80020c6 <_printf_i+0x166>
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	079b      	lsls	r3, r3, #30
 8002172:	d413      	bmi.n	800219c <_printf_i+0x23c>
 8002174:	68e0      	ldr	r0, [r4, #12]
 8002176:	9b03      	ldr	r3, [sp, #12]
 8002178:	4298      	cmp	r0, r3
 800217a:	bfb8      	it	lt
 800217c:	4618      	movlt	r0, r3
 800217e:	e7a4      	b.n	80020ca <_printf_i+0x16a>
 8002180:	2301      	movs	r3, #1
 8002182:	4632      	mov	r2, r6
 8002184:	4649      	mov	r1, r9
 8002186:	4640      	mov	r0, r8
 8002188:	47d0      	blx	sl
 800218a:	3001      	adds	r0, #1
 800218c:	d09b      	beq.n	80020c6 <_printf_i+0x166>
 800218e:	3501      	adds	r5, #1
 8002190:	68e3      	ldr	r3, [r4, #12]
 8002192:	9903      	ldr	r1, [sp, #12]
 8002194:	1a5b      	subs	r3, r3, r1
 8002196:	42ab      	cmp	r3, r5
 8002198:	dcf2      	bgt.n	8002180 <_printf_i+0x220>
 800219a:	e7eb      	b.n	8002174 <_printf_i+0x214>
 800219c:	2500      	movs	r5, #0
 800219e:	f104 0619 	add.w	r6, r4, #25
 80021a2:	e7f5      	b.n	8002190 <_printf_i+0x230>
 80021a4:	080024df 	.word	0x080024df
 80021a8:	080024f0 	.word	0x080024f0

080021ac <memchr>:
 80021ac:	4603      	mov	r3, r0
 80021ae:	b510      	push	{r4, lr}
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	4402      	add	r2, r0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	d101      	bne.n	80021be <memchr+0x12>
 80021ba:	2000      	movs	r0, #0
 80021bc:	e003      	b.n	80021c6 <memchr+0x1a>
 80021be:	7804      	ldrb	r4, [r0, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	428c      	cmp	r4, r1
 80021c4:	d1f6      	bne.n	80021b4 <memchr+0x8>
 80021c6:	bd10      	pop	{r4, pc}

080021c8 <memcpy>:
 80021c8:	440a      	add	r2, r1
 80021ca:	4291      	cmp	r1, r2
 80021cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80021d0:	d100      	bne.n	80021d4 <memcpy+0xc>
 80021d2:	4770      	bx	lr
 80021d4:	b510      	push	{r4, lr}
 80021d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021da:	4291      	cmp	r1, r2
 80021dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021e0:	d1f9      	bne.n	80021d6 <memcpy+0xe>
 80021e2:	bd10      	pop	{r4, pc}

080021e4 <memmove>:
 80021e4:	4288      	cmp	r0, r1
 80021e6:	b510      	push	{r4, lr}
 80021e8:	eb01 0402 	add.w	r4, r1, r2
 80021ec:	d902      	bls.n	80021f4 <memmove+0x10>
 80021ee:	4284      	cmp	r4, r0
 80021f0:	4623      	mov	r3, r4
 80021f2:	d807      	bhi.n	8002204 <memmove+0x20>
 80021f4:	1e43      	subs	r3, r0, #1
 80021f6:	42a1      	cmp	r1, r4
 80021f8:	d008      	beq.n	800220c <memmove+0x28>
 80021fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002202:	e7f8      	b.n	80021f6 <memmove+0x12>
 8002204:	4601      	mov	r1, r0
 8002206:	4402      	add	r2, r0
 8002208:	428a      	cmp	r2, r1
 800220a:	d100      	bne.n	800220e <memmove+0x2a>
 800220c:	bd10      	pop	{r4, pc}
 800220e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002216:	e7f7      	b.n	8002208 <memmove+0x24>

08002218 <_free_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4605      	mov	r5, r0
 800221c:	2900      	cmp	r1, #0
 800221e:	d040      	beq.n	80022a2 <_free_r+0x8a>
 8002220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002224:	1f0c      	subs	r4, r1, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	bfb8      	it	lt
 800222a:	18e4      	addlt	r4, r4, r3
 800222c:	f000 f910 	bl	8002450 <__malloc_lock>
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <_free_r+0x8c>)
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	b933      	cbnz	r3, 8002244 <_free_r+0x2c>
 8002236:	6063      	str	r3, [r4, #4]
 8002238:	6014      	str	r4, [r2, #0]
 800223a:	4628      	mov	r0, r5
 800223c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002240:	f000 b90c 	b.w	800245c <__malloc_unlock>
 8002244:	42a3      	cmp	r3, r4
 8002246:	d908      	bls.n	800225a <_free_r+0x42>
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	1821      	adds	r1, r4, r0
 800224c:	428b      	cmp	r3, r1
 800224e:	bf01      	itttt	eq
 8002250:	6819      	ldreq	r1, [r3, #0]
 8002252:	685b      	ldreq	r3, [r3, #4]
 8002254:	1809      	addeq	r1, r1, r0
 8002256:	6021      	streq	r1, [r4, #0]
 8002258:	e7ed      	b.n	8002236 <_free_r+0x1e>
 800225a:	461a      	mov	r2, r3
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	b10b      	cbz	r3, 8002264 <_free_r+0x4c>
 8002260:	42a3      	cmp	r3, r4
 8002262:	d9fa      	bls.n	800225a <_free_r+0x42>
 8002264:	6811      	ldr	r1, [r2, #0]
 8002266:	1850      	adds	r0, r2, r1
 8002268:	42a0      	cmp	r0, r4
 800226a:	d10b      	bne.n	8002284 <_free_r+0x6c>
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	4401      	add	r1, r0
 8002270:	1850      	adds	r0, r2, r1
 8002272:	4283      	cmp	r3, r0
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	d1e0      	bne.n	800223a <_free_r+0x22>
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4401      	add	r1, r0
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	6053      	str	r3, [r2, #4]
 8002282:	e7da      	b.n	800223a <_free_r+0x22>
 8002284:	d902      	bls.n	800228c <_free_r+0x74>
 8002286:	230c      	movs	r3, #12
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	e7d6      	b.n	800223a <_free_r+0x22>
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	1821      	adds	r1, r4, r0
 8002290:	428b      	cmp	r3, r1
 8002292:	bf01      	itttt	eq
 8002294:	6819      	ldreq	r1, [r3, #0]
 8002296:	685b      	ldreq	r3, [r3, #4]
 8002298:	1809      	addeq	r1, r1, r0
 800229a:	6021      	streq	r1, [r4, #0]
 800229c:	6063      	str	r3, [r4, #4]
 800229e:	6054      	str	r4, [r2, #4]
 80022a0:	e7cb      	b.n	800223a <_free_r+0x22>
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	20000124 	.word	0x20000124

080022a8 <sbrk_aligned>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4e0e      	ldr	r6, [pc, #56]	; (80022e4 <sbrk_aligned+0x3c>)
 80022ac:	460c      	mov	r4, r1
 80022ae:	6831      	ldr	r1, [r6, #0]
 80022b0:	4605      	mov	r5, r0
 80022b2:	b911      	cbnz	r1, 80022ba <sbrk_aligned+0x12>
 80022b4:	f000 f8bc 	bl	8002430 <_sbrk_r>
 80022b8:	6030      	str	r0, [r6, #0]
 80022ba:	4621      	mov	r1, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	f000 f8b7 	bl	8002430 <_sbrk_r>
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	d00a      	beq.n	80022dc <sbrk_aligned+0x34>
 80022c6:	1cc4      	adds	r4, r0, #3
 80022c8:	f024 0403 	bic.w	r4, r4, #3
 80022cc:	42a0      	cmp	r0, r4
 80022ce:	d007      	beq.n	80022e0 <sbrk_aligned+0x38>
 80022d0:	1a21      	subs	r1, r4, r0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f000 f8ac 	bl	8002430 <_sbrk_r>
 80022d8:	3001      	adds	r0, #1
 80022da:	d101      	bne.n	80022e0 <sbrk_aligned+0x38>
 80022dc:	f04f 34ff 	mov.w	r4, #4294967295
 80022e0:	4620      	mov	r0, r4
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
 80022e4:	20000128 	.word	0x20000128

080022e8 <_malloc_r>:
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	1ccd      	adds	r5, r1, #3
 80022ee:	f025 0503 	bic.w	r5, r5, #3
 80022f2:	3508      	adds	r5, #8
 80022f4:	2d0c      	cmp	r5, #12
 80022f6:	bf38      	it	cc
 80022f8:	250c      	movcc	r5, #12
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	4607      	mov	r7, r0
 80022fe:	db01      	blt.n	8002304 <_malloc_r+0x1c>
 8002300:	42a9      	cmp	r1, r5
 8002302:	d905      	bls.n	8002310 <_malloc_r+0x28>
 8002304:	230c      	movs	r3, #12
 8002306:	2600      	movs	r6, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4630      	mov	r0, r6
 800230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002310:	4e2e      	ldr	r6, [pc, #184]	; (80023cc <_malloc_r+0xe4>)
 8002312:	f000 f89d 	bl	8002450 <__malloc_lock>
 8002316:	6833      	ldr	r3, [r6, #0]
 8002318:	461c      	mov	r4, r3
 800231a:	bb34      	cbnz	r4, 800236a <_malloc_r+0x82>
 800231c:	4629      	mov	r1, r5
 800231e:	4638      	mov	r0, r7
 8002320:	f7ff ffc2 	bl	80022a8 <sbrk_aligned>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	4604      	mov	r4, r0
 8002328:	d14d      	bne.n	80023c6 <_malloc_r+0xde>
 800232a:	6834      	ldr	r4, [r6, #0]
 800232c:	4626      	mov	r6, r4
 800232e:	2e00      	cmp	r6, #0
 8002330:	d140      	bne.n	80023b4 <_malloc_r+0xcc>
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	4631      	mov	r1, r6
 8002336:	4638      	mov	r0, r7
 8002338:	eb04 0803 	add.w	r8, r4, r3
 800233c:	f000 f878 	bl	8002430 <_sbrk_r>
 8002340:	4580      	cmp	r8, r0
 8002342:	d13a      	bne.n	80023ba <_malloc_r+0xd2>
 8002344:	6821      	ldr	r1, [r4, #0]
 8002346:	3503      	adds	r5, #3
 8002348:	1a6d      	subs	r5, r5, r1
 800234a:	f025 0503 	bic.w	r5, r5, #3
 800234e:	3508      	adds	r5, #8
 8002350:	2d0c      	cmp	r5, #12
 8002352:	bf38      	it	cc
 8002354:	250c      	movcc	r5, #12
 8002356:	4638      	mov	r0, r7
 8002358:	4629      	mov	r1, r5
 800235a:	f7ff ffa5 	bl	80022a8 <sbrk_aligned>
 800235e:	3001      	adds	r0, #1
 8002360:	d02b      	beq.n	80023ba <_malloc_r+0xd2>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	442b      	add	r3, r5
 8002366:	6023      	str	r3, [r4, #0]
 8002368:	e00e      	b.n	8002388 <_malloc_r+0xa0>
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	1b52      	subs	r2, r2, r5
 800236e:	d41e      	bmi.n	80023ae <_malloc_r+0xc6>
 8002370:	2a0b      	cmp	r2, #11
 8002372:	d916      	bls.n	80023a2 <_malloc_r+0xba>
 8002374:	1961      	adds	r1, r4, r5
 8002376:	42a3      	cmp	r3, r4
 8002378:	6025      	str	r5, [r4, #0]
 800237a:	bf18      	it	ne
 800237c:	6059      	strne	r1, [r3, #4]
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	bf08      	it	eq
 8002382:	6031      	streq	r1, [r6, #0]
 8002384:	5162      	str	r2, [r4, r5]
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	4638      	mov	r0, r7
 800238a:	f104 060b 	add.w	r6, r4, #11
 800238e:	f000 f865 	bl	800245c <__malloc_unlock>
 8002392:	f026 0607 	bic.w	r6, r6, #7
 8002396:	1d23      	adds	r3, r4, #4
 8002398:	1af2      	subs	r2, r6, r3
 800239a:	d0b6      	beq.n	800230a <_malloc_r+0x22>
 800239c:	1b9b      	subs	r3, r3, r6
 800239e:	50a3      	str	r3, [r4, r2]
 80023a0:	e7b3      	b.n	800230a <_malloc_r+0x22>
 80023a2:	6862      	ldr	r2, [r4, #4]
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	bf0c      	ite	eq
 80023a8:	6032      	streq	r2, [r6, #0]
 80023aa:	605a      	strne	r2, [r3, #4]
 80023ac:	e7ec      	b.n	8002388 <_malloc_r+0xa0>
 80023ae:	4623      	mov	r3, r4
 80023b0:	6864      	ldr	r4, [r4, #4]
 80023b2:	e7b2      	b.n	800231a <_malloc_r+0x32>
 80023b4:	4634      	mov	r4, r6
 80023b6:	6876      	ldr	r6, [r6, #4]
 80023b8:	e7b9      	b.n	800232e <_malloc_r+0x46>
 80023ba:	230c      	movs	r3, #12
 80023bc:	4638      	mov	r0, r7
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	f000 f84c 	bl	800245c <__malloc_unlock>
 80023c4:	e7a1      	b.n	800230a <_malloc_r+0x22>
 80023c6:	6025      	str	r5, [r4, #0]
 80023c8:	e7de      	b.n	8002388 <_malloc_r+0xa0>
 80023ca:	bf00      	nop
 80023cc:	20000124 	.word	0x20000124

080023d0 <_realloc_r>:
 80023d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d4:	4680      	mov	r8, r0
 80023d6:	4614      	mov	r4, r2
 80023d8:	460e      	mov	r6, r1
 80023da:	b921      	cbnz	r1, 80023e6 <_realloc_r+0x16>
 80023dc:	4611      	mov	r1, r2
 80023de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023e2:	f7ff bf81 	b.w	80022e8 <_malloc_r>
 80023e6:	b92a      	cbnz	r2, 80023f4 <_realloc_r+0x24>
 80023e8:	f7ff ff16 	bl	8002218 <_free_r>
 80023ec:	4625      	mov	r5, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f4:	f000 f838 	bl	8002468 <_malloc_usable_size_r>
 80023f8:	4284      	cmp	r4, r0
 80023fa:	4607      	mov	r7, r0
 80023fc:	d802      	bhi.n	8002404 <_realloc_r+0x34>
 80023fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002402:	d812      	bhi.n	800242a <_realloc_r+0x5a>
 8002404:	4621      	mov	r1, r4
 8002406:	4640      	mov	r0, r8
 8002408:	f7ff ff6e 	bl	80022e8 <_malloc_r>
 800240c:	4605      	mov	r5, r0
 800240e:	2800      	cmp	r0, #0
 8002410:	d0ed      	beq.n	80023ee <_realloc_r+0x1e>
 8002412:	42bc      	cmp	r4, r7
 8002414:	4622      	mov	r2, r4
 8002416:	4631      	mov	r1, r6
 8002418:	bf28      	it	cs
 800241a:	463a      	movcs	r2, r7
 800241c:	f7ff fed4 	bl	80021c8 <memcpy>
 8002420:	4631      	mov	r1, r6
 8002422:	4640      	mov	r0, r8
 8002424:	f7ff fef8 	bl	8002218 <_free_r>
 8002428:	e7e1      	b.n	80023ee <_realloc_r+0x1e>
 800242a:	4635      	mov	r5, r6
 800242c:	e7df      	b.n	80023ee <_realloc_r+0x1e>
	...

08002430 <_sbrk_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	2300      	movs	r3, #0
 8002434:	4d05      	ldr	r5, [pc, #20]	; (800244c <_sbrk_r+0x1c>)
 8002436:	4604      	mov	r4, r0
 8002438:	4608      	mov	r0, r1
 800243a:	602b      	str	r3, [r5, #0]
 800243c:	f7fe f842 	bl	80004c4 <_sbrk>
 8002440:	1c43      	adds	r3, r0, #1
 8002442:	d102      	bne.n	800244a <_sbrk_r+0x1a>
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	b103      	cbz	r3, 800244a <_sbrk_r+0x1a>
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	2000012c 	.word	0x2000012c

08002450 <__malloc_lock>:
 8002450:	4801      	ldr	r0, [pc, #4]	; (8002458 <__malloc_lock+0x8>)
 8002452:	f000 b811 	b.w	8002478 <__retarget_lock_acquire_recursive>
 8002456:	bf00      	nop
 8002458:	20000130 	.word	0x20000130

0800245c <__malloc_unlock>:
 800245c:	4801      	ldr	r0, [pc, #4]	; (8002464 <__malloc_unlock+0x8>)
 800245e:	f000 b80c 	b.w	800247a <__retarget_lock_release_recursive>
 8002462:	bf00      	nop
 8002464:	20000130 	.word	0x20000130

08002468 <_malloc_usable_size_r>:
 8002468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800246c:	1f18      	subs	r0, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	bfbc      	itt	lt
 8002472:	580b      	ldrlt	r3, [r1, r0]
 8002474:	18c0      	addlt	r0, r0, r3
 8002476:	4770      	bx	lr

08002478 <__retarget_lock_acquire_recursive>:
 8002478:	4770      	bx	lr

0800247a <__retarget_lock_release_recursive>:
 800247a:	4770      	bx	lr

0800247c <_init>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr

08002488 <_fini>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr
